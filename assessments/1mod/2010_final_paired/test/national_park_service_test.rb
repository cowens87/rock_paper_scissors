require 'minitest/autorun'
require 'minitest/pride'
require './lib/national_park_service'
require './lib/vehicle'
require './lib/passenger'

class NationalParkServiceTest < Minitest::Test
  def setup
    @sunny_park = NationalParkService.new('Sunny Park', 13.50)
    @vehicle_1  = Vehicle.new('2001', 'Honda', 'Civic')
    @vehicle_2  = Vehicle.new('2005', 'Toyota', 'Corola')
    @charlie    = Passenger.new({'name' => 'Charlie', 'age' => 18})
    @jude       = Passenger.new({'name' => 'Jude', 'age' => 20})
    @taylor     = Passenger.new({'name' => 'Taylor', 'age' => 12})
  end

  def test_it_exists_and_has_attributes
  # Each park has a unique name and admission price, as well as a way to read that data
    assert_instance_of NationalParkService, @sunny_park
    assert_equal 'Sunny Park', @sunny_park.name
    assert_equal 13.50, @sunny_park.admission_price
  end

  def test_it_opens_with_no_vehicles
    assert_equal [], @sunny_park.vehicles 
  end

  def test_it_can_list_all_vehicles
  # Each park can list all the vehicles that entered the park
    @sunny_park.admit_vehicle(@vehicle_1)
    @sunny_park.admit_vehicle(@vehicle_2)

    assert_equal [@vehicle_1, @vehicle_2], @sunny_park.vehicles
  end

  def test_it_can_list_all_passengers_in_park
  # Each park can list all the passengers that entered the park
    @sunny_park.admit_vehicle(@vehicle_1)
    @sunny_park.admit_vehicle(@vehicle_2)
    @vehicle_1.add_passenger(@charlie)
    @vehicle_1.add_passenger(@jude)
    @vehicle_2.add_passenger(@taylor)

    assert_equal [@charlie, @jude, @taylor], @sunny_park.all_passengers
  end

  def test_it_can_calculate_revenue_generated 
  # Each park can calculate revenue generated. Revenue is generated by charging 
  # the admission price per adult that entered the park.
    @sunny_park.admit_vehicle(@vehicle_1)
    @sunny_park.admit_vehicle(@vehicle_2)
    @vehicle_1.add_passenger(@charlie)
    @vehicle_1.add_passenger(@jude)
    @vehicle_2.add_passenger(@taylor)

    assert_equal 27.00, @sunny_park.total_revenue
  end
end